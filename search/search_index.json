{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project","text":"<p>This is an example website of static generated website using MkDocs.</p> <p>It demonstrates the application several seminal approaches and techniques. A summary of these is shown below. More details on these can be found in the Features section.</p>"},{"location":"#project-features","title":"Project Features","text":""},{"location":"#auto-generated-documentation","title":"Auto-generated documentation","text":"<p>The API Reference section contains the documentation automatically generated from each docstring in the Python code. This is built and compiled using the <code>mkdocstrings</code> package. For more details, refer to the Auto-documentation section.</p>"},{"location":"#packaging","title":"Packaging","text":"<p>This project's packaging and dependency management is done using Poetry. More details can be found in the Packaging section.</p>"},{"location":"#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>This project uses pre-commit hooks. For more details on this subject, consult the Pre-commit hooks section.</p>"},{"location":"#ci-cd","title":"CI-CD","text":"<p>The CI/CD pipeline for this project has been built using GitHub Actions. Details can be found here.</p>"},{"location":"#make","title":"Make","text":"<p>For demonstration purposes, this project includes a Makefile as an alternative to Poetry scripts. Check the details here.</p>"},{"location":"#unit-testing","title":"Unit testing","text":"<p>To show the proces of incorporating tests into a project, I have included some trivial unit tests. Additional info can be found here.</p>"},{"location":"#project-layout","title":"Project Layout","text":"<p>This section gives an overview of the layout of the repository.</p> <p>Info</p> <p>The code to generate this directory tree gets automatically executes and inserted upon building the documentation by the <code>markdown-exec</code> package.</p> Project structure<pre><code>tree -haC --gitignore --du --dirsfirst -I \".git|*.pyc|*.pyi\"\n</code></pre> <pre><code>[312K]  .\n\u251c\u2500\u2500 [ 21K]  .github\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [6.1K]  ISSUE_TEMPLATE\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.1K]  bug_report.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 197]  config.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 852]  feature_request.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 10K]  workflows\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.5K]  ci-cd.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.1K]  code-check.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [2.5K]  dependency.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 505]  PULL_REQUEST_TEMPLATE.md\n\u251c\u2500\u2500 [4.5K]  .vscode\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 537]  settings.json\n\u251c\u2500\u2500 [ 91K]  src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 87K]  mkdocs_demo\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [4.0K]  __pycache__\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [ 10K]  config\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.0K]  __pycache__\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [  22]  __init__.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 383]  config.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.4K]  interfaces.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 275]  trivial.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [ 39K]  docs\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [6.2K]  css\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.2K]  mkdocstrings.css\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [1.0K]  style.css\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 18K]  features\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 542]  auto-documentation.md\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [3.6K]  ci-cd.md\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [  78]  index.md\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.0K]  make.md\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.6K]  packaging.md\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.9K]  pre-commit.md\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 705]  unit-testing.md\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.6K]  images\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 601]  code-json.png\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.2K]  overrides\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 196]  outdated.html\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [2.0K]  index.md\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [ 15K]  lib\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.0K]  __pycache__\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [  20]  __init__.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 922]  factory.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.7K]  mkdocstrings.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.6K]  superfluous.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [5.1K]  scripts\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [  24]  __init__.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 209]  gen_ref_pages.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 336]  mkdocs.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 213]  mypy.py\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 298]  precommit.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [4.1K]  templates\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [  94]  .gitkeep\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [  27]  __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 [5.2K]  mkdocs.yml\n\u251c\u2500\u2500 [8.3K]  tests\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.3K]  lib\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [   0]  __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 349]  test_factory.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [   0]  __init__.py\n\u251c\u2500\u2500 [ 20K]  typings\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 16K]  mkdocs_demo\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [4.0K]  config\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [4.0K]  lib\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 [4.0K]  scripts\n\u251c\u2500\u2500 [ 329]  .editorconfig\n\u251c\u2500\u2500 [  58]  .env.example\n\u251c\u2500\u2500 [1.3K]  .gitattributes\n\u251c\u2500\u2500 [ 116]  .gitignore\n\u251c\u2500\u2500 [1.2K]  .pre-commit-config.yaml\n\u251c\u2500\u2500 [1.1K]  LICENSE\n\u251c\u2500\u2500 [1.4K]  Makefile\n\u251c\u2500\u2500 [   9]  README.md\n\u251c\u2500\u2500 [2.5K]  TODO.md\n\u251c\u2500\u2500 [ 128]  cspell.config.yaml\n\u251c\u2500\u2500 [154K]  poetry.lock\n\u2514\u2500\u2500 [1.6K]  pyproject.toml\n\n 312K used in 25 directories, 51 files\n</code></pre>"},{"location":"features/","title":"Features","text":"<p>All the specific features used in this project are detailed here.</p>"},{"location":"features/auto-documentation/","title":"Auto-generated Documentation","text":"<p>Documentation of this project's Python source code is automatically generated from each docstring in the Python code.</p> <p>This result is compiled using the <code>mkdocstrings</code> package, and subsequently inserted into the main site.</p> <p>The <code>gen_ref_pages</code> function takes care of generating the documentation pages and their navigation structure for the site, using the mkdocs-gen-files plugin.</p>"},{"location":"features/ci-cd/","title":"CI-CD","text":"<p>The CI/CD pipelines for this project are defined using GitHub Actions.</p>"},{"location":"features/ci-cd/#what-is-github-actions","title":"What is GitHub Actions?","text":"<p>GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline. You can create workflows that build and test every pull request to your repository, or deploy merged pull requests to production.<sup>1</sup></p>"},{"location":"features/ci-cd/#full-workflow","title":"Full workflow","text":"<p>Full <code>ci-cd.yml</code>:</p> <pre><code>name: CI-CD\n\non: # (1)!\n    push:\n        branches:\n        - main\n        - master\n    pull_request:\n        branches:\n        - main\n        - master\n    workflow_dispatch:\n\npermissions:\n    contents: write # (2)!\n\nenv: # (3)!\n    PYTHON_VERSION: \"3.11\"\n    POETRY_VERSION: \"1.7.1\"\n    POETRY_URL: https://install.python-poetry.org\n\njobs:\n    deploy-docs: # (4)!\n        runs-on: ubuntu-latest # (5)!\n        steps: # (6)!\n          - name: Checkout\n              uses: actions/checkout@v4\n\n          - name: Configure Git credentials\n            run: |\n                git config user.name github-actions[bot]\n                git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n\n          - name: Set up Python ${{ env.PYTHON_VERSION }}\n            uses: actions/setup-python@v4\n            id: setup_python\n            with:\n                python-version: ${{ env.PYTHON_VERSION }}\n                cache: poetry\n\n          - name: Poetry caching\n            uses: actions/cache@v3\n            with:\n                path: ~/.cache/pypoetry\n                key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}\n\n          - name: Cache packages\n            uses: actions/cache@v3\n            with:\n                path: ~/.local\n                key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}\n\n          - name: Install Poetry ${{ env.POETRY_VERSION }}\n            run: |\n                curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}\n                echo \"$HOME/.local/bin\" &gt;&gt; $GITHUB_PATH\n\n          - name: Install dependencies\n            run: poetry install --without test\n\n          - name: Deploy site # (7)!\n            run: |\n                poetry run \\\n                    mkdocs gh-deploy \\\n                    --config-file src/mkdocs_demo/mkdocs.yml \\\n                    --clean \\\n                    --use-directory-urls \\\n                    --force\n</code></pre> <ol> <li> <p>Define the events that can trigger the workflow:</p> <ul> <li><code>push:</code> On a push to the <code>master</code>/<code>main</code> branch.</li> <li><code>pull_request:</code> On pull request to the <code>master</code>/<code>main</code> branch.</li> <li><code>workflow_dispatch:</code> Enables the workflow to be triggered manually (e.g. from GitHub's browser interface).</li> </ul> </li> <li> <p>Assign <code>write</code> permissions to the workflow.</p> </li> <li>Define a map of environment variables available in the workflow.</li> <li>The name of the job in the workflow.</li> <li>The type of machine for the job to run on.</li> <li>The sequence of steps the job will perform.</li> <li>This final step performs the actual deployment of the documentation to GitHub Pages.</li> </ol> <ol> <li> <p>https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions \u21a9</p> </li> </ol>"},{"location":"features/make/","title":"Make","text":"<p>A <code>Makefile</code> is used to determine which pieces of the program need to be recompiled. The <code>Makefile</code> is run using the <code>make</code> command.</p> <p>Tip</p> <p>If the <code>make</code> command is not available, the tool can be installed using the system's package manager, e.g. <code>sudo apt install make -y</code>.</p>"},{"location":"features/make/#why-use-a-makefile","title":"Why use a <code>Makefile</code>?","text":"<p>Honestly, I primarily use these in conjunction with compiled languages, e.g. within my <code>Rust</code> or <code>Mojo</code> projects. They make more sense in those contexts (no need to use <code>.PHONY</code> everywhere), although for Rust, <code>cargo-make</code> arguably does the job better. The main reason I have chosen to include one in this project is to demonstrate their application.</p> <p>The <code>make</code> tool incorporates logic to determine what to recompile and what not to recompile (or re-transpile). For example, if a source file has not been changed, it will not be recompiled.</p> <p>This seems trivial in a small project, but it makes a tremendous difference in build times for large projects. Furthermore, you can use <code>Makefile</code> to make specific command chains (recipes) dependant on another.</p>"},{"location":"features/make/#recipe-default","title":"Recipe: Default","text":"<p>The <code>help</code> recipe has been marked as the default recipe. Hence, it will show when calling <code>make</code> without a recipe specified.</p> <pre><code>default: help\n\n.PHONY: help\nhelp: # Show help for each recipe.\n    @grep -E '^[a-zA-Z0-9 -]+:.*#'  Makefile | sort | while read -r l; do printf \"\\033[1;32m$$(echo $$l | cut -f 1 -d':')\\033[00m:$$(echo $$l | cut -f 2- -d'#')\\n\"; done\n</code></pre> Recipe: Default<pre><code>make\n</code></pre> <pre><code>Usage:\n    make &lt;recipe&gt;\n\nAvailable recipes:\n    help                            Show help for each recipe.\n    pkg-install                     Installs the project.\n    pkg-update                      Updates the project's dependencies to their latest versions.\n    pkg-types                       Build the typing stubs for the project.\n    pkg-compile                     Compiles the project into sdist and wheel.\n    pc-install                      Installs the pre-commit hooks.\n    pc-update                       Updates the pre-commit hooks to their latest version.\n    pc-run                          Run pre-commit hooks on all files immediately.\n    md-serve                        Run MkDocs' builtin development server.\n    md-build                        Build the MkDocs documentation.\n</code></pre>"},{"location":"features/make/#recipe-package-setup","title":"Recipe: Package setup","text":"<p>The <code>all</code> recipe installs the project, installs the pre-commit hooks and then updates the pre-commit hooks to their latest version.</p> <pre><code>.PHONY: all\nall: pkg-install pc-install pc-update\n\n.PHONY: pkg-install\npkg-install: # Installs the project.\n    poetry install\n\n.PHONY: pc-install\npc-install: pkg-install # Installs the pre-commit hooks.\n    poetry run pre-commit install\n\n.PHONY: pc-update\npc-update: pc-install # Updates the pre-commit hooks to their latest version.\n    poetry run pre-commit autoupdate\n</code></pre> Recipe: Set up package<pre><code>make all\n</code></pre> <pre><code>poetry install\nInstalling dependencies from lock file\n\nPackage operations: 3 installs, 0 updates, 0 removals\n\n  \u2022 Installing iniconfig (2.0.0)\n  \u2022 Installing pluggy (1.4.0)\n  \u2022 Installing pytest (7.4.4)\n\nInstalling the current project: mkdocs-demo (1.1.0)\npoetry run pre-commit install\npre-commit installed at .git/hooks/pre-commit\npoetry run pre-commit autoupdate\n[https://github.com/pre-commit/pre-commit-hooks] already up to date!\n[https://github.com/astral-sh/ruff-pre-commit] already up to date!\n[https://github.com/pre-commit/mirrors-mypy] already up to date!\n</code></pre>"},{"location":"features/make/#recipe-run-pre-commit-hooks","title":"Recipe: Run pre-commit hooks","text":"<p>The <code>pc-run</code> recipe executes the pre-commits hooks on all files on demand.</p> <p>Info</p> <p>This recipe depends on the <code>pc-install</code> recipe, which in turn depends on the <code>pkg-install</code> recipe. In other words, <code>make</code> ensures the package is installed, the pre-commit hooks are installed and then executes the <code>pc-run</code> recipe.</p> <pre><code>.PHONY: pc-run\npc-run: pc-install # Run pre-commit hooks on all files immediately.\n    poetry run pre-commit run --all-files\n</code></pre> Recipe: Run pre-commit hooks<pre><code>poetry install\nInstalling dependencies from lock file\n\nNo dependencies to install or update\n\nInstalling the current project: mkdocs-demo (1.1.0)\npoetry run pre-commit install\npre-commit installed at .git/hooks/pre-commit\npoetry run pre-commit run --all-files\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Initializing environment for https://github.com/astral-sh/ruff-pre-commit.\n[INFO] Initializing environment for https://github.com/pre-commit/mirrors-mypy.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[INFO] Installing environment for https://github.com/astral-sh/ruff-pre-commit.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[INFO] Installing environment for https://github.com/pre-commit/mirrors-mypy.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nfix end of files.........................................................Passed\ntrim trailing whitespace.................................................Failed\n- hook id: trailing-whitespace\n- exit code: 1\n- files were modified by this hook\n\nFixing .github/ISSUE_TEMPLATE/bug_report.yml\nFixing TODO.md\nFixing .github/ISSUE_TEMPLATE/feature_request.yml\n\ncheck yaml...............................................................Passed\ncheck python ast.........................................................Passed\ncheck builtin type constructor use.......................................Passed\ncheck docstring is first.................................................Passed\ncheck json...............................................................Passed\ncheck for merge conflicts................................................Passed\ncheck toml...............................................................Passed\ndebug statements (python)................................................Passed\ndetect private key.......................................................Passed\nfix end of files.........................................................Passed\nfix utf-8 byte order marker..............................................Passed\nfix python encoding pragma...............................................Passed\nmixed line ending........................................................Passed\nRuff Linter..............................................................Passed\nRuff Formatter...........................................................Passed\nMypy.....................................................................Passed\nmake: *** [Makefile:35: pc-run] Error 1\n</code></pre>"},{"location":"features/make/#complete-makefile","title":"Complete <code>Makefile</code>","text":"Check out the full <code>Makefile</code> here. <p><pre><code>default: help\n\n.PHONY: all pkg-install pkg-update pkg-compile pkg-types pc-install pc-update pc-run md-serve md-build\n\nhelp: ## Show help for each recipe.\n    @echo \"Usage:\\n\\tmake &lt;recipe&gt;\"\n    @echo \"\\nAvailable recipes:\"\n    @awk 'BEGIN {FS = \":.*##\"; } /^[$$()% a-zA-Z_-]+:.*?##/ \\\n    { printf \"\\t\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2 } /^##@/ \\\n    { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n\nall: pkg-install pc-install pc-update\n\n# Package recipes\npkg-install: ## Installs the project.\n    poetry install\n\npkg-update: pkg-install ## Updates the project's dependencies to their latest versions.\n    poetry update\n\npkg-types: pkg-install ## Build the typing stubs for the project.\n    stubgen -p mkdocs_demo -o typings\n\npkg-compile: pkg-install pkg-types ## Compiles the project into sdist and wheel.\n    poetry build\n\n# Pre-commit recipes\npc-install: pkg-install ## Installs the pre-commit hooks.\n    poetry run pre-commit install\n\npc-update: pc-install ## Updates the pre-commit hooks to their latest version.\n    poetry run pre-commit autoupdate\n\npc-run: pc-install ## Run pre-commit hooks on all files immediately.\n    poetry run pre-commit run --all-files\n\n# MkDocs recipes\nmd-serve: all ## Run MkDocs' builtin development server.\n    poetry run mkdocs serve --config-file src/mkdocs_demo/mkdocs.yml\n\n.DELETE_ON_ERROR:\nmd-build: all pkg-update ## Build the MkDocs documentation.\n    poetry run mkdocs build --config-file src/mkdocs_demo/mkdocs.yml --clean --use-directory-urls\n</code></pre> </p>"},{"location":"features/make/#alternative-poetry-scripts","title":"Alternative: <code>poetry</code> scripts","text":"<p>Within <code>poetry</code>'s <code>pyproject.toml</code>, you can define scripts. You can define these scripts under the <code>[tool.poetry.scripts]</code> header.</p> <p>Subsequently, after running <code>poetry install</code> to register the script, you can run them using <code>poetry run &lt;script_name&gt;</code>.</p> <p>Info</p> <p>The scripts in <code>poetry</code> are quite similar to those in a <code>package.json</code> file, for those familiar with NodeJS projects.</p> <p>However, the main drawback of these scripts is that they require a specific entrypoint within a source file (e.g., <code>gen-typings = \"src.mkdocs_demo.scripts.mypy:gen_types\"</code>).</p> <p>Moreover, they will run \"naively\". Specifically, they will transpile/compile every single file encompassed by the script's command. If all but one source file has remained unchanged, it will still encompass all files.</p> <p>Note</p> <p>Of course, this depends on the parameters passed to the subprocess command. I am generalising here for the sake of providing an example.</p>"},{"location":"features/packaging/","title":"Packaging","text":"<p>Dependency management and packaging for this project is managed by Poetry.</p>"},{"location":"features/packaging/#poetry","title":"Poetry","text":"<p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you. Poetry offers a lockfile to ensure repeatable installs, and can build your project for distribution.<sup>1</sup></p>"},{"location":"features/packaging/#why-poetry","title":"Why Poetry?","text":"<p>Personally, I find <code>poetry</code> dependable and easy to use. Of course, there are alternatives to <code>poetry</code>. Examples of these are:</p> <ul> <li>PDM</li> <li>Rye</li> </ul> <p>Using a dependency management tool allows us to easily set up repeatable installations (through a lockfile, such as <code>poetry.lock</code>), as well as package distribution.</p> <p>Building the package</p> <p>To build your package, simply run <code>poetry build</code>. This will compile your package to the <code>dist</code> directory.</p> <p>By default, both an <code>sdist</code> and a <code>wheel</code> distribution will be compiled.</p> <p>The entire package configuration is managed through a single <code>pyproject.toml</code> file located in the repository's root. This is a big improvement compared to the clunky procedure using a classic approach with a <code>setuptools</code> backend.</p> <p>Moreover, <code>poetry</code> allows easy distinguishing between core, development and test dependencies. This enables the user to choose what to install in an easy manner using the <code>pip</code> CLI.</p>"},{"location":"features/packaging/#drawbacks","title":"Drawbacks","text":"<p>A principal drawback I find, is that the <code>.venv</code> (Virtual Environment) folder created by Poetry can become quite large.</p> <p>For projects that require complex dependencies (e.g., PyTorch projects, which ship with GPU/CUDA drivers, etc.), I often use <code>micromamba</code> to create a specific <code>conda</code> environment for the project. This way, I can re-use the same environment for multiple projects.</p> <p><code>micromamba</code> is a tiny version of the mamba package manager. It is a statically linked <code>C++</code> executable with a separate command line interface. It does not need a base environment and does not come with a default version of Python.<sup>2</sup></p> <p>These environments can be persisted in a <code>YAML</code> file to create a functionality similar to a lockfile.</p> Why <code>micromamba</code> as opposed to <code>conda</code>? <p><code>micromamba</code><sup>2</sup> is very lightweight, and written in <code>C++</code>. As a result, it is much faster than a vanilla Anaconda set-up, and requires less space to boot.</p> <ol> <li> <p>https://python-poetry.org/docs/ \u21a9</p> </li> <li> <p>https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html \u21a9\u21a9</p> </li> </ol>"},{"location":"features/pre-commit/","title":"Pre-commit Hooks","text":"<p>Pre-commit hooks are by default executed, as their name suggests, before every commit. They serve as a guardrail to ensure code quality and other useful stuff.</p> <p>The hooks can perform tasks, such as formatting code or trimming trailing whitespace, or perform specific checks. When a key check fails (such as <code>mypy</code> static type checking), the commit cannot be made until the issue has been resolved.</p> <p>Tip</p> <p>Pre-commit hooks can be called on more events than on commit. All options, and their descriptions, can be found here.</p>"},{"location":"features/pre-commit/#using-pre-commit-hooks","title":"Using pre-commit hooks","text":"<p>In order to use pre-commit hooks in your projects:</p> <ol> <li>The <code>pre-commit</code> package needs to be installed:<ul> <li>Refer to my <code>pyproject.toml</code>.</li> <li>Accomplished using <code>poetry add --group=\"dev\" pre-commit</code>.</li> </ul> </li> <li>The desired hooks need to be defined in <code>.pre-commit-config.yaml</code>.</li> <li>The hooks need to be installed:<ul> <li>Run <code>pre-commit install</code></li> </ul> </li> </ol> Manually executing and updating pre-commit hooks <p>Pre-commit hooks can be run on demand, as well as automatically updated to the latest version.</p> <p>I have elected to create <code>poetry</code> scripts for both applications (refer to <code>pyproject.toml</code>).</p> <p>Executing pre-commit hooks on demand</p> <p>To run your pre-commit hooks on demand, instead of only when their trigger condition is met, use the command <code>pre-commit run --all-files</code>.</p> <p>Updating pre-commit hooks</p> <p>To update all pre-commit hooks to their latest version, use the command <code>pre-commit autoupdate</code>.</p>"},{"location":"features/pre-commit/#pre-commit","title":"Pre-commit","text":"<p>These hooks are from the default <code>pre-commit</code> repository:</p> <ul> <li><code>check-yaml</code>:<ul> <li>Validates YAML files.</li> </ul> </li> <li><code>end-of-file-fixer</code>:<ul> <li>Ensures a blank line at each file's end.</li> </ul> </li> <li><code>trailing-whitespace</code>:<ul> <li>Trims trailing whitespace from each line's end.</li> </ul> </li> </ul>"},{"location":"features/pre-commit/#mypy","title":"Mypy","text":"<p>These hooks are from the <code>mypy</code> repository:</p> <ul> <li><code>mypy</code>:<ul> <li>Static type checking for Python code.</li> </ul> </li> </ul>"},{"location":"features/pre-commit/#ruff","title":"Ruff","text":"<p>These hooks are from the <code>astral-sh ruff</code> repository:</p> <p>Use <code>Ruff</code> instead of <code>isort</code>, <code>black</code> and <code>flake8</code>.</p> <p>For those of you who have not yet heard about Ruff; it is a drop-in replacement for <code>isort</code>, <code>black</code> and <code>flake8</code> combined. Within VSCode, it takes care of linting, formatting and import sorting.</p> <p>Ruff works out of the box, and completely blows aforementioned packages out of the water in terms of performance, due to being Rust-based.</p> <ul> <li><code>ruff</code>:<ul> <li>Linter for Python code.</li> </ul> </li> <li><code>ruff-format</code>:<ul> <li>Formatter for Python code.</li> </ul> </li> </ul>"},{"location":"features/pre-commit/#full-configuration","title":"Full configuration","text":"Check out the full <code>.pre-commit-config.yaml</code> here. <p><pre><code>repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n        args: [--markdown-linebreak-ext=md]\n      - id: check-yaml\n        args: [--unsafe, --allow-multiple-documents]\n      - id: check-ast\n      - id: check-builtin-literals\n      - id: check-docstring-first\n      - id: check-json\n      - id: check-merge-conflict\n      - id: check-toml\n      - id: debug-statements\n      - id: detect-private-key\n      - id: end-of-file-fixer\n        exclude: \\.json$\n      - id: fix-byte-order-marker\n      - id: fix-encoding-pragma\n        args: [--remove]\n      - id: mixed-line-ending\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.2.2\n    hooks:\n      - id: ruff\n        name: Ruff Linter\n        types_or:\n          - python\n          - pyi\n          - jupyter\n        args: [--fix]\n      - id: ruff-format\n        name: Ruff Formatter\n        types_or:\n          - python\n          - pyi\n          - jupyter\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.8.0\n    hooks:\n      - id: mypy\n        name: Mypy\n        exclude: |\n          (?x)(\n            ^typings/\n          )\n        args: [--ignore-missing-imports]\n</code></pre> </p>"},{"location":"features/unit-testing/","title":"Unit Testing","text":"<p>This project demonstrates the use of unit testing using pytest library.</p> <p>The tests are located in the <code>tests</code> folder in the root of the repository.</p> <p>Kind of useless tests ahead.</p> <p>For this specific project, while functional, the tests are sort of trivial, because there is not that much to be tested in this project.</p> <p>The tests mainly serve to demonstrate the approach of incorporating testing in your project.</p>"},{"location":"features/unit-testing/#running-the-tests","title":"Running the tests","text":"<p>Execute the command <code>poetry run pytest -v</code> to execute all tests and view the result in the Terminal.</p> <p>Tip</p> <p>Running the tests can be made a requirement of pre-commit hooks and/or CI-CD pipelines.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>mkdocs_demo<ul> <li>config<ul> <li>config</li> <li>interfaces</li> <li>trivial</li> </ul> </li> <li>lib<ul> <li>factory</li> <li>mkdocstrings</li> <li>superfluous</li> </ul> </li> <li>scripts<ul> <li>gen_ref_pages</li> <li>mkdocs</li> <li>mypy</li> <li>precommit</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/mkdocs_demo/","title":"Index","text":""},{"location":"reference/mkdocs_demo/#mkdocs_demo","title":"mkdocs_demo","text":"<p><code>mkdocs_demo</code> module</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config","title":"config","text":"<p><code>config</code> module</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.config","title":"config","text":"<p>This module contains MkDocstrings configuration objects.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.config.RefGenConfig","title":"RefGenConfig  <code>dataclass</code>","text":"<p>Dataclass to store MkDocstrings configuration.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.config.RefGenConfig.handler","title":"handler  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handler: Language = PYTHON\n</code></pre> <p>Handler language.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.config.RefGenConfig.out_dir","title":"out_dir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>out_dir: Path = Path('reference')\n</code></pre> <p>Output directory.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces","title":"interfaces","text":"<p>This module contains interfaces and custom types.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.ITrolling","title":"ITrolling","text":"<pre><code>ITrolling(x: float, n: int)\n</code></pre> <p>Abstract base class for implementing trolling interface.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.ITrolling--parameters","title":"Parameters","text":"<p><code>x</code> : <code>float</code>     The parameter <code>x</code> is a float, which means it can hold decimal     values. It is used to store a numerical value.</p> <p><code>n</code> : <code>int</code>     The parameter <code>n</code> is an integer that represents the number of     iterations or steps in a process.</p> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __init__(self, x: float, n: int) -&gt; None:\n    \"\"\"\n    The above function is an initializer method for a class that takes in\n    two parameters, `x` and `n`, and does not return anything.\n\n    Parameters\n    ----------\n    `x` : `float`\n        The parameter `x` is a float, which means it can hold decimal\n        values. It is used to store a numerical value.\n\n    `n` : `int`\n        The parameter `n` is an integer that represents the number of\n        iterations or steps in a process.\n    \"\"\"\n\n    self.x = x\n    self.n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.ITrolling.n","title":"n  <code>instance-attribute</code>","text":"<pre><code>n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.ITrolling.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x = x\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.ITrolling.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"\"\"{self.x} * {self.n} = {self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.ITrolling.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"\"\"x={self.x}, n={self.n}, hence the multiple={self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.ITrolling.from_dict","title":"from_dict  <code>abstractmethod</code>","text":"<pre><code>from_dict(d: dict[str, int]) -&gt; Self\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>@abstractmethod\ndef from_dict(cls, d: dict[str, int]) -&gt; Self:\n    pass\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.ITrolling.multiple","title":"multiple  <code>abstractmethod</code>","text":"<pre><code>multiple() -&gt; float\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>@abstractproperty\n@abstractmethod\ndef multiple(self) -&gt; float:\n    pass\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.Language","title":"Language","text":"<p>             Bases: <code>Enum</code></p> <p>Enum that represents different programming languages.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.Language.BASH","title":"BASH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BASH: str = '*.sh'\n</code></pre> <p>Bash language.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.interfaces.Language.PYTHON","title":"PYTHON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PYTHON: str = '*.py'\n</code></pre> <p>Python language.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.trivial","title":"trivial","text":"<p>This module contains extreme triviality.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.trivial.trivial_function","title":"trivial_function","text":"<pre><code>trivial_function() -&gt; Literal['OMG, thanks!']\n</code></pre> <p>Thanks for that.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.config.trivial.trivial_function--returns","title":"Returns","text":"<p><code>Literal</code>     Absolutely useless string literal.</p> Source code in <code>src/mkdocs_demo/config/trivial.py</code> <pre><code>def trivial_function() -&gt; Literal[\"OMG, thanks!\"]:\n    \"\"\"\n    Thanks for that.\n\n    Returns\n    -------\n    `Literal`\n        Absolutely useless string literal.\n    \"\"\"\n\n    return \"OMG, thanks!\"\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib","title":"lib","text":"<p><code>lib</code> module.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.factory","title":"factory","text":"<p>This module contains factory functions.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.factory.command_factory","title":"command_factory","text":"<pre><code>command_factory(cmd: str) -&gt; Callable[..., int | None]\n</code></pre> <p>The <code>factory</code> function takes a command as input and returns a function that, when called, executes the command and returns the exit code or None if the execution is interrupted.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.factory.command_factory--parameters","title":"Parameters","text":"<p><code>cmd</code> : <code>str</code>     The <code>cmd</code> parameter is a string that represents a command to be executed.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.factory.command_factory--returns","title":"Returns","text":"<p><code>Callable</code>[<code>...</code>, <code>int</code> | <code>None</code>]     The factory function returns a callable object, which is a function. The function takes no     arguments and returns either an integer or None.</p> Source code in <code>src/mkdocs_demo/lib/factory.py</code> <pre><code>def command_factory(cmd: str) -&gt; Callable[..., int | None]:\n    \"\"\"\n    The `factory` function takes a command as input and returns a function that, when called, executes\n    the command and returns the exit code or None if the execution is interrupted.\n\n    Parameters\n    ----------\n    `cmd` : `str`\n        The `cmd` parameter is a string that represents a command to be executed.\n\n    Returns\n    -------\n    `Callable`[`...`, `int` | `None`]\n        The factory function returns a callable object, which is a function. The function takes no\n        arguments and returns either an integer or None.\n    \"\"\"\n\n    def _func(_cmd: str = cmd) -&gt; int | None:\n        try:\n            return subprocess.call(_cmd.split(\" \"), shell=False)\n        except KeyboardInterrupt:\n            pass\n\n        return None\n\n    return _func\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.mkdocstrings","title":"mkdocstrings","text":"<p>This module contains code for auto-generating the codebase documentation.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.mkdocstrings.gen_ref_pages","title":"gen_ref_pages","text":"<pre><code>gen_ref_pages(config: type[RefGenConfig]) -&gt; Literal[True]\n</code></pre> <p>The <code>gen_ref_pages</code> function generates reference pages for Python modules and creates a navigation structure for them.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.mkdocstrings.gen_ref_pages--parameters","title":"Parameters","text":"<p><code>config</code> : <code>type</code>[<code>RefGenConfig</code>]     The <code>config</code> parameter is of type <code>RefGenConfig</code>. It is used to provide configuration settings for     generating reference pages.</p> Source code in <code>src/mkdocs_demo/lib/mkdocstrings.py</code> <pre><code>def gen_ref_pages(config: type[RefGenConfig]) -&gt; Literal[True]:\n    \"\"\"\n    The `gen_ref_pages` function generates reference pages for Python modules\n    and creates a navigation structure for them.\n\n    Parameters\n    ----------\n    `config` : `type`[`RefGenConfig`]\n        The `config` parameter is of type `RefGenConfig`. It is used to provide configuration settings for\n        generating reference pages.\n    \"\"\"\n\n    nav = mkdocs_gen_files.Nav()\n    src = Path(__file__).parent.parent.parent\n\n    # Get paths for the give language handler\n    for path in sorted(src.rglob(config.handler.value)):\n        module_path = path.relative_to(src).with_suffix(\"\")\n        doc_path = path.relative_to(src).with_suffix(\".md\")\n        full_doc_path = config.out_dir.joinpath(doc_path)\n\n        parts = tuple(module_path.parts)\n\n        match parts[-1]:\n            case \"__init__\":\n                parts = parts[:-1]\n                doc_path = doc_path.with_name(\"index.md\")\n                full_doc_path = full_doc_path.with_name(\"index.md\")\n            case \"__main__\":\n                continue\n\n        nav[parts] = doc_path.as_posix()\n\n        with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n            identifier = \".\".join(parts)\n            fd.write(f\"::: {identifier}\")\n\n        mkdocs_gen_files.set_edit_path(full_doc_path, path)\n\n    with mkdocs_gen_files.open(config.out_dir.joinpath(\"SUMMARY.md\"), \"w\") as nav_file:\n        nav_file.writelines(nav.build_literate_nav())\n\n    return True\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous","title":"superfluous","text":"<p>This module contains additional trivial filler code.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass","title":"TestClass","text":"<pre><code>TestClass(num_features: int, hidden_layers: int)\n</code></pre> <p>             Bases: <code>object</code></p> <p>The TestClass is a basic Python class.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass--parameters","title":"Parameters","text":"<p><code>num_features</code> : <code>int</code>     The <code>num_features</code> parameter represents the number of input features in your model. It     indicates the size of the input layer of your neural network.</p> <p><code>hidden_layers</code> : <code>int</code>     The <code>hidden_layers</code> parameter represents the number of hidden layers in a neural network.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def __init__(self, num_features: int, hidden_layers: int) -&gt; None:\n    \"\"\"\n    Initializes the number of features and the number of hidden layers for a neural network.\n\n    Parameters\n    ----------\n    `num_features` : `int`\n        The `num_features` parameter represents the number of input features in your model. It\n        indicates the size of the input layer of your neural network.\n\n    `hidden_layers` : `int`\n        The `hidden_layers` parameter represents the number of hidden layers in a neural network.\n    \"\"\"\n\n    self.num_features: int = num_features\n    self.hidden_layers: int = hidden_layers\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.MODEL_TYPE","title":"MODEL_TYPE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODEL_TYPE: str = 'MLP'\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.hidden_layers","title":"hidden_layers  <code>instance-attribute</code>","text":"<pre><code>hidden_layers: int = hidden_layers\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.num_features","title":"num_features  <code>instance-attribute</code>","text":"<pre><code>num_features: int = num_features\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.get_type","title":"get_type  <code>staticmethod</code>","text":"<pre><code>get_type() -&gt; Literal['Neural Network']\n</code></pre> <p>The method <code>get_type</code> returns the string \"Neural Network\".</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.get_type--returns","title":"Returns","text":"<p><code>Literal</code>     The string \"Neural Network\".</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@staticmethod\ndef get_type() -&gt; Literal[\"Neural Network\"]:\n    \"\"\"\n    The method `get_type` returns the string \"Neural Network\".\n\n    Returns\n    -------\n    `Literal`\n        The string \"Neural Network\".\n    \"\"\"\n\n    return \"Neural Network\"\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.load_model","title":"load_model  <code>classmethod</code>","text":"<pre><code>load_model(path: Path | str) -&gt; str\n</code></pre> <p>The method <code>load_model</code> loads a model from a given path and returns a string indicating the path from which the model was loaded.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.load_model--parameters","title":"Parameters","text":"<p><code>path</code> : <code>Path</code> | <code>str</code>     The <code>path</code> parameter is the path to the model file that needs to be loaded. It can be either a     string or a <code>Path</code> object.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.load_model--returns","title":"Returns","text":"<p><code>str</code>     A string that indicates the path from which the model was loaded.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@classmethod\ndef load_model(cls, path: Path | str) -&gt; str:\n    \"\"\"\n    The method `load_model` loads a model from a given path and returns a string indicating the\n    path from which the model was loaded.\n\n    Parameters\n    ----------\n    `path` : `Path` | `str`\n        The `path` parameter is the path to the model file that needs to be loaded. It can be either a\n        string or a `Path` object.\n\n    Returns\n    -------\n    `str`\n        A string that indicates the path from which the model was loaded.\n    \"\"\"\n\n    if isinstance(path, str):\n        path = Path(path)\n\n    return f\"Model loaded from: '{path}' - Type: {cls.MODEL_TYPE}\"\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.show_model","title":"show_model","text":"<pre><code>show_model() -&gt; dict[str, str | int]\n</code></pre> <p>The method <code>show_model</code> returns a dictionary containing the model type and information about its layers.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.TestClass.show_model--returns","title":"Returns","text":"<p><code>dict</code>[<code>str</code>, <code>str</code> | <code>int</code>]     A dictionary containing the model type and the layers of the model.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def show_model(self) -&gt; dict[str, str | int]:\n    \"\"\"\n    The method `show_model` returns a dictionary containing the model type and information about\n    its layers.\n\n    Returns\n    -------\n    `dict`[`str`, `str` | `int`]\n        A dictionary containing the model type and the layers of the model.\n    \"\"\"\n\n    model_dict: dict[str, str | int] = {\"model_type\": self.MODEL_TYPE}\n    model_dict.update(self._show_layers())\n\n    return model_dict\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling","title":"Trolling","text":"<pre><code>Trolling(x: float, n: int)\n</code></pre> <p>             Bases: <code>ITrolling</code></p> <p>The class Trolling implements the ITrolling interface.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling--parameters","title":"Parameters","text":"<p><code>x</code> : <code>float</code>     The parameter <code>x</code> is a float, which means it can hold decimal     values. It is used to store a numerical value.</p> <p><code>n</code> : <code>int</code>     The parameter <code>n</code> is an integer that represents the number of     iterations or steps in a process.</p> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __init__(self, x: float, n: int) -&gt; None:\n    \"\"\"\n    The above function is an initializer method for a class that takes in\n    two parameters, `x` and `n`, and does not return anything.\n\n    Parameters\n    ----------\n    `x` : `float`\n        The parameter `x` is a float, which means it can hold decimal\n        values. It is used to store a numerical value.\n\n    `n` : `int`\n        The parameter `n` is an integer that represents the number of\n        iterations or steps in a process.\n    \"\"\"\n\n    self.x = x\n    self.n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.multiple","title":"multiple  <code>property</code>","text":"<pre><code>multiple: float\n</code></pre> <p>The function calculates the product of the variables <code>x</code> and <code>n</code>.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.multiple--returns","title":"Returns","text":"<p><code>float</code>     The product of <code>self.x</code> and <code>self.n</code>.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.n","title":"n  <code>instance-attribute</code>","text":"<pre><code>n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x = x\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"\"\"{self.x} * {self.n} = {self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"\"\"x={self.x}, n={self.n}, hence the multiple={self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(d: dict[str, int]) -&gt; Self\n</code></pre> <p>The function <code>from_dict</code> takes a dictionary as input, checks if it contains the required keys, and returns an instance of the class with the dictionary values as arguments.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.from_dict--parameters","title":"Parameters","text":"<p><code>d</code> : <code>dict</code>[<code>str</code>, <code>int</code>]     The parameter <code>d</code> is a dictionary with string keys and integer     values.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.Trolling.from_dict--returns","title":"Returns","text":"<p><code>Self</code>     The method is returning an instance of the class itself with the     attributes specified in the dictionary <code>d</code>.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@classmethod\ndef from_dict(cls, d: dict[str, int]) -&gt; Self:\n    \"\"\"\n    The function `from_dict` takes a dictionary as input, checks if it\n    contains the required keys, and returns an instance of the class with\n    the dictionary values as arguments.\n\n    Parameters\n    ----------\n    `d` : `dict`[`str`, `int`]\n        The parameter `d` is a dictionary with string keys and integer\n        values.\n\n    Returns\n    -------\n    `Self`\n        The method is returning an instance of the class itself with the\n        attributes specified in the dictionary `d`.\n    \"\"\"\n\n    required = (\"x\", \"n\")\n    obj = {k: v for k, v in d.items()}\n\n    assert obj.keys() in required\n\n    return cls(**obj)\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.create_trolling","title":"create_trolling","text":"<pre><code>create_trolling(d: dict[str, int]) -&gt; Trolling\n</code></pre> <p>The function <code>create_trolling</code> takes a dictionary <code>d</code> and returns a <code>Trolling</code> object created from the dictionary.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.create_trolling--parameters","title":"Parameters","text":"<p><code>d</code> : <code>dict</code>[<code>str</code>, <code>int</code>]     A dictionary containing the data needed to create a Trolling object. The keys of the dictionary are strings representing the attributes of the Trolling object, and the values are integers representing the values of those attributes.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.lib.superfluous.create_trolling--returns","title":"Returns","text":"<p><code>Trolling</code>     An instance of the class Trolling.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def create_trolling(d: dict[str, int]) -&gt; Trolling:\n    \"\"\"\n    The function `create_trolling` takes a dictionary `d` and returns a `Trolling` object created from\n    the dictionary.\n\n    Parameters\n    ----------\n    `d` : `dict`[`str`, `int`]\n        A dictionary containing the data needed to create a Trolling object. The keys of the dictionary are\n    strings representing the attributes of the Trolling object, and the values are integers representing\n    the values of those attributes.\n\n    Returns\n    -------\n    `Trolling`\n        An instance of the class Trolling.\n    \"\"\"\n\n    return Trolling.from_dict(d)\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts","title":"scripts","text":"<p><code>scripts</code> module.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.gen_ref_pages","title":"gen_ref_pages","text":"<p>This module generates reference pages for MkDocstrings.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.gen_ref_pages._","title":"_  <code>module-attribute</code>","text":"<pre><code>_ = gen_ref_pages(config=RefGenConfig)\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.mkdocs","title":"mkdocs","text":"<p>This module generates script entrypoints for Poetry related to MkDocs.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.mkdocs.build","title":"build  <code>module-attribute</code>","text":"<pre><code>build = command_factory(\n    cmd=\"mkdocs build --config-file src/mkdocs_demo/mkdocs.yml --clean --use-directory-urls\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.mkdocs.serve","title":"serve  <code>module-attribute</code>","text":"<pre><code>serve = command_factory(\n    cmd=\"mkdocs serve --config-file src/mkdocs_demo/mkdocs.yml\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.mypy","title":"mypy","text":"<p>This module generates script entrypoints for Poetry related to Mypy typings generation.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.mypy.gen_types","title":"gen_types  <code>module-attribute</code>","text":"<pre><code>gen_types = command_factory(\n    \"stubgen -p mkdocs_demo -o typings\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.precommit","title":"precommit","text":"<p>This module generates script entrypoints for Poetry related to pre-commit.</p>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.precommit.install","title":"install  <code>module-attribute</code>","text":"<pre><code>install = command_factory(cmd='pre-commit install')\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.precommit.run","title":"run  <code>module-attribute</code>","text":"<pre><code>run = command_factory(cmd='pre-commit run --all-files')\n</code></pre>"},{"location":"reference/mkdocs_demo/#mkdocs_demo.scripts.precommit.update","title":"update  <code>module-attribute</code>","text":"<pre><code>update = command_factory(cmd='pre-commit autoupdate')\n</code></pre>"},{"location":"reference/mkdocs_demo/config/","title":"Index","text":""},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config","title":"mkdocs_demo.config","text":"<p><code>config</code> module</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.config","title":"config","text":"<p>This module contains MkDocstrings configuration objects.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.config.RefGenConfig","title":"RefGenConfig  <code>dataclass</code>","text":"<p>Dataclass to store MkDocstrings configuration.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.config.RefGenConfig.handler","title":"handler  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handler: Language = PYTHON\n</code></pre> <p>Handler language.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.config.RefGenConfig.out_dir","title":"out_dir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>out_dir: Path = Path('reference')\n</code></pre> <p>Output directory.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces","title":"interfaces","text":"<p>This module contains interfaces and custom types.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.ITrolling","title":"ITrolling","text":"<pre><code>ITrolling(x: float, n: int)\n</code></pre> <p>Abstract base class for implementing trolling interface.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.ITrolling--parameters","title":"Parameters","text":"<p><code>x</code> : <code>float</code>     The parameter <code>x</code> is a float, which means it can hold decimal     values. It is used to store a numerical value.</p> <p><code>n</code> : <code>int</code>     The parameter <code>n</code> is an integer that represents the number of     iterations or steps in a process.</p> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __init__(self, x: float, n: int) -&gt; None:\n    \"\"\"\n    The above function is an initializer method for a class that takes in\n    two parameters, `x` and `n`, and does not return anything.\n\n    Parameters\n    ----------\n    `x` : `float`\n        The parameter `x` is a float, which means it can hold decimal\n        values. It is used to store a numerical value.\n\n    `n` : `int`\n        The parameter `n` is an integer that represents the number of\n        iterations or steps in a process.\n    \"\"\"\n\n    self.x = x\n    self.n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.ITrolling.n","title":"n  <code>instance-attribute</code>","text":"<pre><code>n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.ITrolling.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x = x\n</code></pre>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.ITrolling.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"\"\"{self.x} * {self.n} = {self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.ITrolling.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"\"\"x={self.x}, n={self.n}, hence the multiple={self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.ITrolling.from_dict","title":"from_dict  <code>abstractmethod</code>","text":"<pre><code>from_dict(d: dict[str, int]) -&gt; Self\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>@abstractmethod\ndef from_dict(cls, d: dict[str, int]) -&gt; Self:\n    pass\n</code></pre>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.ITrolling.multiple","title":"multiple  <code>abstractmethod</code>","text":"<pre><code>multiple() -&gt; float\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>@abstractproperty\n@abstractmethod\ndef multiple(self) -&gt; float:\n    pass\n</code></pre>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.Language","title":"Language","text":"<p>             Bases: <code>Enum</code></p> <p>Enum that represents different programming languages.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.Language.BASH","title":"BASH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BASH: str = '*.sh'\n</code></pre> <p>Bash language.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.interfaces.Language.PYTHON","title":"PYTHON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PYTHON: str = '*.py'\n</code></pre> <p>Python language.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.trivial","title":"trivial","text":"<p>This module contains extreme triviality.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.trivial.trivial_function","title":"trivial_function","text":"<pre><code>trivial_function() -&gt; Literal['OMG, thanks!']\n</code></pre> <p>Thanks for that.</p>"},{"location":"reference/mkdocs_demo/config/#mkdocs_demo.config.trivial.trivial_function--returns","title":"Returns","text":"<p><code>Literal</code>     Absolutely useless string literal.</p> Source code in <code>src/mkdocs_demo/config/trivial.py</code> <pre><code>def trivial_function() -&gt; Literal[\"OMG, thanks!\"]:\n    \"\"\"\n    Thanks for that.\n\n    Returns\n    -------\n    `Literal`\n        Absolutely useless string literal.\n    \"\"\"\n\n    return \"OMG, thanks!\"\n</code></pre>"},{"location":"reference/mkdocs_demo/config/config/","title":"config","text":""},{"location":"reference/mkdocs_demo/config/config/#mkdocs_demo.config.config","title":"mkdocs_demo.config.config","text":"<p>This module contains MkDocstrings configuration objects.</p>"},{"location":"reference/mkdocs_demo/config/config/#mkdocs_demo.config.config.RefGenConfig","title":"RefGenConfig  <code>dataclass</code>","text":"<p>Dataclass to store MkDocstrings configuration.</p>"},{"location":"reference/mkdocs_demo/config/config/#mkdocs_demo.config.config.RefGenConfig.handler","title":"handler  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handler: Language = PYTHON\n</code></pre> <p>Handler language.</p>"},{"location":"reference/mkdocs_demo/config/config/#mkdocs_demo.config.config.RefGenConfig.out_dir","title":"out_dir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>out_dir: Path = Path('reference')\n</code></pre> <p>Output directory.</p>"},{"location":"reference/mkdocs_demo/config/interfaces/","title":"interfaces","text":""},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces","title":"mkdocs_demo.config.interfaces","text":"<p>This module contains interfaces and custom types.</p>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.ITrolling","title":"ITrolling","text":"<pre><code>ITrolling(x: float, n: int)\n</code></pre> <p>Abstract base class for implementing trolling interface.</p>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.ITrolling--parameters","title":"Parameters","text":"<p><code>x</code> : <code>float</code>     The parameter <code>x</code> is a float, which means it can hold decimal     values. It is used to store a numerical value.</p> <p><code>n</code> : <code>int</code>     The parameter <code>n</code> is an integer that represents the number of     iterations or steps in a process.</p> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __init__(self, x: float, n: int) -&gt; None:\n    \"\"\"\n    The above function is an initializer method for a class that takes in\n    two parameters, `x` and `n`, and does not return anything.\n\n    Parameters\n    ----------\n    `x` : `float`\n        The parameter `x` is a float, which means it can hold decimal\n        values. It is used to store a numerical value.\n\n    `n` : `int`\n        The parameter `n` is an integer that represents the number of\n        iterations or steps in a process.\n    \"\"\"\n\n    self.x = x\n    self.n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.ITrolling.n","title":"n  <code>instance-attribute</code>","text":"<pre><code>n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.ITrolling.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x = x\n</code></pre>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.ITrolling.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"\"\"{self.x} * {self.n} = {self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.ITrolling.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"\"\"x={self.x}, n={self.n}, hence the multiple={self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.ITrolling.from_dict","title":"from_dict  <code>abstractmethod</code>","text":"<pre><code>from_dict(d: dict[str, int]) -&gt; Self\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>@abstractmethod\ndef from_dict(cls, d: dict[str, int]) -&gt; Self:\n    pass\n</code></pre>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.ITrolling.multiple","title":"multiple  <code>abstractmethod</code>","text":"<pre><code>multiple() -&gt; float\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>@abstractproperty\n@abstractmethod\ndef multiple(self) -&gt; float:\n    pass\n</code></pre>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.Language","title":"Language","text":"<p>             Bases: <code>Enum</code></p> <p>Enum that represents different programming languages.</p>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.Language.BASH","title":"BASH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BASH: str = '*.sh'\n</code></pre> <p>Bash language.</p>"},{"location":"reference/mkdocs_demo/config/interfaces/#mkdocs_demo.config.interfaces.Language.PYTHON","title":"PYTHON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PYTHON: str = '*.py'\n</code></pre> <p>Python language.</p>"},{"location":"reference/mkdocs_demo/config/trivial/","title":"trivial","text":""},{"location":"reference/mkdocs_demo/config/trivial/#mkdocs_demo.config.trivial","title":"mkdocs_demo.config.trivial","text":"<p>This module contains extreme triviality.</p>"},{"location":"reference/mkdocs_demo/config/trivial/#mkdocs_demo.config.trivial.trivial_function","title":"trivial_function","text":"<pre><code>trivial_function() -&gt; Literal['OMG, thanks!']\n</code></pre> <p>Thanks for that.</p>"},{"location":"reference/mkdocs_demo/config/trivial/#mkdocs_demo.config.trivial.trivial_function--returns","title":"Returns","text":"<p><code>Literal</code>     Absolutely useless string literal.</p> Source code in <code>src/mkdocs_demo/config/trivial.py</code> <pre><code>def trivial_function() -&gt; Literal[\"OMG, thanks!\"]:\n    \"\"\"\n    Thanks for that.\n\n    Returns\n    -------\n    `Literal`\n        Absolutely useless string literal.\n    \"\"\"\n\n    return \"OMG, thanks!\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/","title":"Index","text":""},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib","title":"mkdocs_demo.lib","text":"<p><code>lib</code> module.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.factory","title":"factory","text":"<p>This module contains factory functions.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.factory.command_factory","title":"command_factory","text":"<pre><code>command_factory(cmd: str) -&gt; Callable[..., int | None]\n</code></pre> <p>The <code>factory</code> function takes a command as input and returns a function that, when called, executes the command and returns the exit code or None if the execution is interrupted.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.factory.command_factory--parameters","title":"Parameters","text":"<p><code>cmd</code> : <code>str</code>     The <code>cmd</code> parameter is a string that represents a command to be executed.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.factory.command_factory--returns","title":"Returns","text":"<p><code>Callable</code>[<code>...</code>, <code>int</code> | <code>None</code>]     The factory function returns a callable object, which is a function. The function takes no     arguments and returns either an integer or None.</p> Source code in <code>src/mkdocs_demo/lib/factory.py</code> <pre><code>def command_factory(cmd: str) -&gt; Callable[..., int | None]:\n    \"\"\"\n    The `factory` function takes a command as input and returns a function that, when called, executes\n    the command and returns the exit code or None if the execution is interrupted.\n\n    Parameters\n    ----------\n    `cmd` : `str`\n        The `cmd` parameter is a string that represents a command to be executed.\n\n    Returns\n    -------\n    `Callable`[`...`, `int` | `None`]\n        The factory function returns a callable object, which is a function. The function takes no\n        arguments and returns either an integer or None.\n    \"\"\"\n\n    def _func(_cmd: str = cmd) -&gt; int | None:\n        try:\n            return subprocess.call(_cmd.split(\" \"), shell=False)\n        except KeyboardInterrupt:\n            pass\n\n        return None\n\n    return _func\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.mkdocstrings","title":"mkdocstrings","text":"<p>This module contains code for auto-generating the codebase documentation.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.mkdocstrings.gen_ref_pages","title":"gen_ref_pages","text":"<pre><code>gen_ref_pages(config: type[RefGenConfig]) -&gt; Literal[True]\n</code></pre> <p>The <code>gen_ref_pages</code> function generates reference pages for Python modules and creates a navigation structure for them.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.mkdocstrings.gen_ref_pages--parameters","title":"Parameters","text":"<p><code>config</code> : <code>type</code>[<code>RefGenConfig</code>]     The <code>config</code> parameter is of type <code>RefGenConfig</code>. It is used to provide configuration settings for     generating reference pages.</p> Source code in <code>src/mkdocs_demo/lib/mkdocstrings.py</code> <pre><code>def gen_ref_pages(config: type[RefGenConfig]) -&gt; Literal[True]:\n    \"\"\"\n    The `gen_ref_pages` function generates reference pages for Python modules\n    and creates a navigation structure for them.\n\n    Parameters\n    ----------\n    `config` : `type`[`RefGenConfig`]\n        The `config` parameter is of type `RefGenConfig`. It is used to provide configuration settings for\n        generating reference pages.\n    \"\"\"\n\n    nav = mkdocs_gen_files.Nav()\n    src = Path(__file__).parent.parent.parent\n\n    # Get paths for the give language handler\n    for path in sorted(src.rglob(config.handler.value)):\n        module_path = path.relative_to(src).with_suffix(\"\")\n        doc_path = path.relative_to(src).with_suffix(\".md\")\n        full_doc_path = config.out_dir.joinpath(doc_path)\n\n        parts = tuple(module_path.parts)\n\n        match parts[-1]:\n            case \"__init__\":\n                parts = parts[:-1]\n                doc_path = doc_path.with_name(\"index.md\")\n                full_doc_path = full_doc_path.with_name(\"index.md\")\n            case \"__main__\":\n                continue\n\n        nav[parts] = doc_path.as_posix()\n\n        with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n            identifier = \".\".join(parts)\n            fd.write(f\"::: {identifier}\")\n\n        mkdocs_gen_files.set_edit_path(full_doc_path, path)\n\n    with mkdocs_gen_files.open(config.out_dir.joinpath(\"SUMMARY.md\"), \"w\") as nav_file:\n        nav_file.writelines(nav.build_literate_nav())\n\n    return True\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous","title":"superfluous","text":"<p>This module contains additional trivial filler code.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass","title":"TestClass","text":"<pre><code>TestClass(num_features: int, hidden_layers: int)\n</code></pre> <p>             Bases: <code>object</code></p> <p>The TestClass is a basic Python class.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass--parameters","title":"Parameters","text":"<p><code>num_features</code> : <code>int</code>     The <code>num_features</code> parameter represents the number of input features in your model. It     indicates the size of the input layer of your neural network.</p> <p><code>hidden_layers</code> : <code>int</code>     The <code>hidden_layers</code> parameter represents the number of hidden layers in a neural network.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def __init__(self, num_features: int, hidden_layers: int) -&gt; None:\n    \"\"\"\n    Initializes the number of features and the number of hidden layers for a neural network.\n\n    Parameters\n    ----------\n    `num_features` : `int`\n        The `num_features` parameter represents the number of input features in your model. It\n        indicates the size of the input layer of your neural network.\n\n    `hidden_layers` : `int`\n        The `hidden_layers` parameter represents the number of hidden layers in a neural network.\n    \"\"\"\n\n    self.num_features: int = num_features\n    self.hidden_layers: int = hidden_layers\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.MODEL_TYPE","title":"MODEL_TYPE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODEL_TYPE: str = 'MLP'\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.hidden_layers","title":"hidden_layers  <code>instance-attribute</code>","text":"<pre><code>hidden_layers: int = hidden_layers\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.num_features","title":"num_features  <code>instance-attribute</code>","text":"<pre><code>num_features: int = num_features\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.get_type","title":"get_type  <code>staticmethod</code>","text":"<pre><code>get_type() -&gt; Literal['Neural Network']\n</code></pre> <p>The method <code>get_type</code> returns the string \"Neural Network\".</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.get_type--returns","title":"Returns","text":"<p><code>Literal</code>     The string \"Neural Network\".</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@staticmethod\ndef get_type() -&gt; Literal[\"Neural Network\"]:\n    \"\"\"\n    The method `get_type` returns the string \"Neural Network\".\n\n    Returns\n    -------\n    `Literal`\n        The string \"Neural Network\".\n    \"\"\"\n\n    return \"Neural Network\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.load_model","title":"load_model  <code>classmethod</code>","text":"<pre><code>load_model(path: Path | str) -&gt; str\n</code></pre> <p>The method <code>load_model</code> loads a model from a given path and returns a string indicating the path from which the model was loaded.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.load_model--parameters","title":"Parameters","text":"<p><code>path</code> : <code>Path</code> | <code>str</code>     The <code>path</code> parameter is the path to the model file that needs to be loaded. It can be either a     string or a <code>Path</code> object.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.load_model--returns","title":"Returns","text":"<p><code>str</code>     A string that indicates the path from which the model was loaded.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@classmethod\ndef load_model(cls, path: Path | str) -&gt; str:\n    \"\"\"\n    The method `load_model` loads a model from a given path and returns a string indicating the\n    path from which the model was loaded.\n\n    Parameters\n    ----------\n    `path` : `Path` | `str`\n        The `path` parameter is the path to the model file that needs to be loaded. It can be either a\n        string or a `Path` object.\n\n    Returns\n    -------\n    `str`\n        A string that indicates the path from which the model was loaded.\n    \"\"\"\n\n    if isinstance(path, str):\n        path = Path(path)\n\n    return f\"Model loaded from: '{path}' - Type: {cls.MODEL_TYPE}\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.show_model","title":"show_model","text":"<pre><code>show_model() -&gt; dict[str, str | int]\n</code></pre> <p>The method <code>show_model</code> returns a dictionary containing the model type and information about its layers.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.TestClass.show_model--returns","title":"Returns","text":"<p><code>dict</code>[<code>str</code>, <code>str</code> | <code>int</code>]     A dictionary containing the model type and the layers of the model.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def show_model(self) -&gt; dict[str, str | int]:\n    \"\"\"\n    The method `show_model` returns a dictionary containing the model type and information about\n    its layers.\n\n    Returns\n    -------\n    `dict`[`str`, `str` | `int`]\n        A dictionary containing the model type and the layers of the model.\n    \"\"\"\n\n    model_dict: dict[str, str | int] = {\"model_type\": self.MODEL_TYPE}\n    model_dict.update(self._show_layers())\n\n    return model_dict\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling","title":"Trolling","text":"<pre><code>Trolling(x: float, n: int)\n</code></pre> <p>             Bases: <code>ITrolling</code></p> <p>The class Trolling implements the ITrolling interface.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling--parameters","title":"Parameters","text":"<p><code>x</code> : <code>float</code>     The parameter <code>x</code> is a float, which means it can hold decimal     values. It is used to store a numerical value.</p> <p><code>n</code> : <code>int</code>     The parameter <code>n</code> is an integer that represents the number of     iterations or steps in a process.</p> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __init__(self, x: float, n: int) -&gt; None:\n    \"\"\"\n    The above function is an initializer method for a class that takes in\n    two parameters, `x` and `n`, and does not return anything.\n\n    Parameters\n    ----------\n    `x` : `float`\n        The parameter `x` is a float, which means it can hold decimal\n        values. It is used to store a numerical value.\n\n    `n` : `int`\n        The parameter `n` is an integer that represents the number of\n        iterations or steps in a process.\n    \"\"\"\n\n    self.x = x\n    self.n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.multiple","title":"multiple  <code>property</code>","text":"<pre><code>multiple: float\n</code></pre> <p>The function calculates the product of the variables <code>x</code> and <code>n</code>.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.multiple--returns","title":"Returns","text":"<p><code>float</code>     The product of <code>self.x</code> and <code>self.n</code>.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.n","title":"n  <code>instance-attribute</code>","text":"<pre><code>n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x = x\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"\"\"{self.x} * {self.n} = {self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"\"\"x={self.x}, n={self.n}, hence the multiple={self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(d: dict[str, int]) -&gt; Self\n</code></pre> <p>The function <code>from_dict</code> takes a dictionary as input, checks if it contains the required keys, and returns an instance of the class with the dictionary values as arguments.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.from_dict--parameters","title":"Parameters","text":"<p><code>d</code> : <code>dict</code>[<code>str</code>, <code>int</code>]     The parameter <code>d</code> is a dictionary with string keys and integer     values.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.Trolling.from_dict--returns","title":"Returns","text":"<p><code>Self</code>     The method is returning an instance of the class itself with the     attributes specified in the dictionary <code>d</code>.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@classmethod\ndef from_dict(cls, d: dict[str, int]) -&gt; Self:\n    \"\"\"\n    The function `from_dict` takes a dictionary as input, checks if it\n    contains the required keys, and returns an instance of the class with\n    the dictionary values as arguments.\n\n    Parameters\n    ----------\n    `d` : `dict`[`str`, `int`]\n        The parameter `d` is a dictionary with string keys and integer\n        values.\n\n    Returns\n    -------\n    `Self`\n        The method is returning an instance of the class itself with the\n        attributes specified in the dictionary `d`.\n    \"\"\"\n\n    required = (\"x\", \"n\")\n    obj = {k: v for k, v in d.items()}\n\n    assert obj.keys() in required\n\n    return cls(**obj)\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.create_trolling","title":"create_trolling","text":"<pre><code>create_trolling(d: dict[str, int]) -&gt; Trolling\n</code></pre> <p>The function <code>create_trolling</code> takes a dictionary <code>d</code> and returns a <code>Trolling</code> object created from the dictionary.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.create_trolling--parameters","title":"Parameters","text":"<p><code>d</code> : <code>dict</code>[<code>str</code>, <code>int</code>]     A dictionary containing the data needed to create a Trolling object. The keys of the dictionary are strings representing the attributes of the Trolling object, and the values are integers representing the values of those attributes.</p>"},{"location":"reference/mkdocs_demo/lib/#mkdocs_demo.lib.superfluous.create_trolling--returns","title":"Returns","text":"<p><code>Trolling</code>     An instance of the class Trolling.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def create_trolling(d: dict[str, int]) -&gt; Trolling:\n    \"\"\"\n    The function `create_trolling` takes a dictionary `d` and returns a `Trolling` object created from\n    the dictionary.\n\n    Parameters\n    ----------\n    `d` : `dict`[`str`, `int`]\n        A dictionary containing the data needed to create a Trolling object. The keys of the dictionary are\n    strings representing the attributes of the Trolling object, and the values are integers representing\n    the values of those attributes.\n\n    Returns\n    -------\n    `Trolling`\n        An instance of the class Trolling.\n    \"\"\"\n\n    return Trolling.from_dict(d)\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/factory/","title":"factory","text":""},{"location":"reference/mkdocs_demo/lib/factory/#mkdocs_demo.lib.factory","title":"mkdocs_demo.lib.factory","text":"<p>This module contains factory functions.</p>"},{"location":"reference/mkdocs_demo/lib/factory/#mkdocs_demo.lib.factory.command_factory","title":"command_factory","text":"<pre><code>command_factory(cmd: str) -&gt; Callable[..., int | None]\n</code></pre> <p>The <code>factory</code> function takes a command as input and returns a function that, when called, executes the command and returns the exit code or None if the execution is interrupted.</p>"},{"location":"reference/mkdocs_demo/lib/factory/#mkdocs_demo.lib.factory.command_factory--parameters","title":"Parameters","text":"<p><code>cmd</code> : <code>str</code>     The <code>cmd</code> parameter is a string that represents a command to be executed.</p>"},{"location":"reference/mkdocs_demo/lib/factory/#mkdocs_demo.lib.factory.command_factory--returns","title":"Returns","text":"<p><code>Callable</code>[<code>...</code>, <code>int</code> | <code>None</code>]     The factory function returns a callable object, which is a function. The function takes no     arguments and returns either an integer or None.</p> Source code in <code>src/mkdocs_demo/lib/factory.py</code> <pre><code>def command_factory(cmd: str) -&gt; Callable[..., int | None]:\n    \"\"\"\n    The `factory` function takes a command as input and returns a function that, when called, executes\n    the command and returns the exit code or None if the execution is interrupted.\n\n    Parameters\n    ----------\n    `cmd` : `str`\n        The `cmd` parameter is a string that represents a command to be executed.\n\n    Returns\n    -------\n    `Callable`[`...`, `int` | `None`]\n        The factory function returns a callable object, which is a function. The function takes no\n        arguments and returns either an integer or None.\n    \"\"\"\n\n    def _func(_cmd: str = cmd) -&gt; int | None:\n        try:\n            return subprocess.call(_cmd.split(\" \"), shell=False)\n        except KeyboardInterrupt:\n            pass\n\n        return None\n\n    return _func\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/mkdocstrings/","title":"mkdocstrings","text":""},{"location":"reference/mkdocs_demo/lib/mkdocstrings/#mkdocs_demo.lib.mkdocstrings","title":"mkdocs_demo.lib.mkdocstrings","text":"<p>This module contains code for auto-generating the codebase documentation.</p>"},{"location":"reference/mkdocs_demo/lib/mkdocstrings/#mkdocs_demo.lib.mkdocstrings.gen_ref_pages","title":"gen_ref_pages","text":"<pre><code>gen_ref_pages(config: type[RefGenConfig]) -&gt; Literal[True]\n</code></pre> <p>The <code>gen_ref_pages</code> function generates reference pages for Python modules and creates a navigation structure for them.</p>"},{"location":"reference/mkdocs_demo/lib/mkdocstrings/#mkdocs_demo.lib.mkdocstrings.gen_ref_pages--parameters","title":"Parameters","text":"<p><code>config</code> : <code>type</code>[<code>RefGenConfig</code>]     The <code>config</code> parameter is of type <code>RefGenConfig</code>. It is used to provide configuration settings for     generating reference pages.</p> Source code in <code>src/mkdocs_demo/lib/mkdocstrings.py</code> <pre><code>def gen_ref_pages(config: type[RefGenConfig]) -&gt; Literal[True]:\n    \"\"\"\n    The `gen_ref_pages` function generates reference pages for Python modules\n    and creates a navigation structure for them.\n\n    Parameters\n    ----------\n    `config` : `type`[`RefGenConfig`]\n        The `config` parameter is of type `RefGenConfig`. It is used to provide configuration settings for\n        generating reference pages.\n    \"\"\"\n\n    nav = mkdocs_gen_files.Nav()\n    src = Path(__file__).parent.parent.parent\n\n    # Get paths for the give language handler\n    for path in sorted(src.rglob(config.handler.value)):\n        module_path = path.relative_to(src).with_suffix(\"\")\n        doc_path = path.relative_to(src).with_suffix(\".md\")\n        full_doc_path = config.out_dir.joinpath(doc_path)\n\n        parts = tuple(module_path.parts)\n\n        match parts[-1]:\n            case \"__init__\":\n                parts = parts[:-1]\n                doc_path = doc_path.with_name(\"index.md\")\n                full_doc_path = full_doc_path.with_name(\"index.md\")\n            case \"__main__\":\n                continue\n\n        nav[parts] = doc_path.as_posix()\n\n        with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n            identifier = \".\".join(parts)\n            fd.write(f\"::: {identifier}\")\n\n        mkdocs_gen_files.set_edit_path(full_doc_path, path)\n\n    with mkdocs_gen_files.open(config.out_dir.joinpath(\"SUMMARY.md\"), \"w\") as nav_file:\n        nav_file.writelines(nav.build_literate_nav())\n\n    return True\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/","title":"superfluous","text":""},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous","title":"mkdocs_demo.lib.superfluous","text":"<p>This module contains additional trivial filler code.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass","title":"TestClass","text":"<pre><code>TestClass(num_features: int, hidden_layers: int)\n</code></pre> <p>             Bases: <code>object</code></p> <p>The TestClass is a basic Python class.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass--parameters","title":"Parameters","text":"<p><code>num_features</code> : <code>int</code>     The <code>num_features</code> parameter represents the number of input features in your model. It     indicates the size of the input layer of your neural network.</p> <p><code>hidden_layers</code> : <code>int</code>     The <code>hidden_layers</code> parameter represents the number of hidden layers in a neural network.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def __init__(self, num_features: int, hidden_layers: int) -&gt; None:\n    \"\"\"\n    Initializes the number of features and the number of hidden layers for a neural network.\n\n    Parameters\n    ----------\n    `num_features` : `int`\n        The `num_features` parameter represents the number of input features in your model. It\n        indicates the size of the input layer of your neural network.\n\n    `hidden_layers` : `int`\n        The `hidden_layers` parameter represents the number of hidden layers in a neural network.\n    \"\"\"\n\n    self.num_features: int = num_features\n    self.hidden_layers: int = hidden_layers\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.MODEL_TYPE","title":"MODEL_TYPE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODEL_TYPE: str = 'MLP'\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.hidden_layers","title":"hidden_layers  <code>instance-attribute</code>","text":"<pre><code>hidden_layers: int = hidden_layers\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.num_features","title":"num_features  <code>instance-attribute</code>","text":"<pre><code>num_features: int = num_features\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.get_type","title":"get_type  <code>staticmethod</code>","text":"<pre><code>get_type() -&gt; Literal['Neural Network']\n</code></pre> <p>The method <code>get_type</code> returns the string \"Neural Network\".</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.get_type--returns","title":"Returns","text":"<p><code>Literal</code>     The string \"Neural Network\".</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@staticmethod\ndef get_type() -&gt; Literal[\"Neural Network\"]:\n    \"\"\"\n    The method `get_type` returns the string \"Neural Network\".\n\n    Returns\n    -------\n    `Literal`\n        The string \"Neural Network\".\n    \"\"\"\n\n    return \"Neural Network\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.load_model","title":"load_model  <code>classmethod</code>","text":"<pre><code>load_model(path: Path | str) -&gt; str\n</code></pre> <p>The method <code>load_model</code> loads a model from a given path and returns a string indicating the path from which the model was loaded.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.load_model--parameters","title":"Parameters","text":"<p><code>path</code> : <code>Path</code> | <code>str</code>     The <code>path</code> parameter is the path to the model file that needs to be loaded. It can be either a     string or a <code>Path</code> object.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.load_model--returns","title":"Returns","text":"<p><code>str</code>     A string that indicates the path from which the model was loaded.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@classmethod\ndef load_model(cls, path: Path | str) -&gt; str:\n    \"\"\"\n    The method `load_model` loads a model from a given path and returns a string indicating the\n    path from which the model was loaded.\n\n    Parameters\n    ----------\n    `path` : `Path` | `str`\n        The `path` parameter is the path to the model file that needs to be loaded. It can be either a\n        string or a `Path` object.\n\n    Returns\n    -------\n    `str`\n        A string that indicates the path from which the model was loaded.\n    \"\"\"\n\n    if isinstance(path, str):\n        path = Path(path)\n\n    return f\"Model loaded from: '{path}' - Type: {cls.MODEL_TYPE}\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.show_model","title":"show_model","text":"<pre><code>show_model() -&gt; dict[str, str | int]\n</code></pre> <p>The method <code>show_model</code> returns a dictionary containing the model type and information about its layers.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.TestClass.show_model--returns","title":"Returns","text":"<p><code>dict</code>[<code>str</code>, <code>str</code> | <code>int</code>]     A dictionary containing the model type and the layers of the model.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def show_model(self) -&gt; dict[str, str | int]:\n    \"\"\"\n    The method `show_model` returns a dictionary containing the model type and information about\n    its layers.\n\n    Returns\n    -------\n    `dict`[`str`, `str` | `int`]\n        A dictionary containing the model type and the layers of the model.\n    \"\"\"\n\n    model_dict: dict[str, str | int] = {\"model_type\": self.MODEL_TYPE}\n    model_dict.update(self._show_layers())\n\n    return model_dict\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling","title":"Trolling","text":"<pre><code>Trolling(x: float, n: int)\n</code></pre> <p>             Bases: <code>ITrolling</code></p> <p>The class Trolling implements the ITrolling interface.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling--parameters","title":"Parameters","text":"<p><code>x</code> : <code>float</code>     The parameter <code>x</code> is a float, which means it can hold decimal     values. It is used to store a numerical value.</p> <p><code>n</code> : <code>int</code>     The parameter <code>n</code> is an integer that represents the number of     iterations or steps in a process.</p> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __init__(self, x: float, n: int) -&gt; None:\n    \"\"\"\n    The above function is an initializer method for a class that takes in\n    two parameters, `x` and `n`, and does not return anything.\n\n    Parameters\n    ----------\n    `x` : `float`\n        The parameter `x` is a float, which means it can hold decimal\n        values. It is used to store a numerical value.\n\n    `n` : `int`\n        The parameter `n` is an integer that represents the number of\n        iterations or steps in a process.\n    \"\"\"\n\n    self.x = x\n    self.n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.multiple","title":"multiple  <code>property</code>","text":"<pre><code>multiple: float\n</code></pre> <p>The function calculates the product of the variables <code>x</code> and <code>n</code>.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.multiple--returns","title":"Returns","text":"<p><code>float</code>     The product of <code>self.x</code> and <code>self.n</code>.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.n","title":"n  <code>instance-attribute</code>","text":"<pre><code>n = n\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x = x\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"\"\"{self.x} * {self.n} = {self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>src/mkdocs_demo/config/interfaces.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"\"\"x={self.x}, n={self.n}, hence the multiple={self.multiple}\"\"\"\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(d: dict[str, int]) -&gt; Self\n</code></pre> <p>The function <code>from_dict</code> takes a dictionary as input, checks if it contains the required keys, and returns an instance of the class with the dictionary values as arguments.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.from_dict--parameters","title":"Parameters","text":"<p><code>d</code> : <code>dict</code>[<code>str</code>, <code>int</code>]     The parameter <code>d</code> is a dictionary with string keys and integer     values.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.Trolling.from_dict--returns","title":"Returns","text":"<p><code>Self</code>     The method is returning an instance of the class itself with the     attributes specified in the dictionary <code>d</code>.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>@classmethod\ndef from_dict(cls, d: dict[str, int]) -&gt; Self:\n    \"\"\"\n    The function `from_dict` takes a dictionary as input, checks if it\n    contains the required keys, and returns an instance of the class with\n    the dictionary values as arguments.\n\n    Parameters\n    ----------\n    `d` : `dict`[`str`, `int`]\n        The parameter `d` is a dictionary with string keys and integer\n        values.\n\n    Returns\n    -------\n    `Self`\n        The method is returning an instance of the class itself with the\n        attributes specified in the dictionary `d`.\n    \"\"\"\n\n    required = (\"x\", \"n\")\n    obj = {k: v for k, v in d.items()}\n\n    assert obj.keys() in required\n\n    return cls(**obj)\n</code></pre>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.create_trolling","title":"create_trolling","text":"<pre><code>create_trolling(d: dict[str, int]) -&gt; Trolling\n</code></pre> <p>The function <code>create_trolling</code> takes a dictionary <code>d</code> and returns a <code>Trolling</code> object created from the dictionary.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.create_trolling--parameters","title":"Parameters","text":"<p><code>d</code> : <code>dict</code>[<code>str</code>, <code>int</code>]     A dictionary containing the data needed to create a Trolling object. The keys of the dictionary are strings representing the attributes of the Trolling object, and the values are integers representing the values of those attributes.</p>"},{"location":"reference/mkdocs_demo/lib/superfluous/#mkdocs_demo.lib.superfluous.create_trolling--returns","title":"Returns","text":"<p><code>Trolling</code>     An instance of the class Trolling.</p> Source code in <code>src/mkdocs_demo/lib/superfluous.py</code> <pre><code>def create_trolling(d: dict[str, int]) -&gt; Trolling:\n    \"\"\"\n    The function `create_trolling` takes a dictionary `d` and returns a `Trolling` object created from\n    the dictionary.\n\n    Parameters\n    ----------\n    `d` : `dict`[`str`, `int`]\n        A dictionary containing the data needed to create a Trolling object. The keys of the dictionary are\n    strings representing the attributes of the Trolling object, and the values are integers representing\n    the values of those attributes.\n\n    Returns\n    -------\n    `Trolling`\n        An instance of the class Trolling.\n    \"\"\"\n\n    return Trolling.from_dict(d)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/","title":"Index","text":""},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts","title":"mkdocs_demo.scripts","text":"<p><code>scripts</code> module.</p>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.gen_ref_pages","title":"gen_ref_pages","text":"<p>This module generates reference pages for MkDocstrings.</p>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.gen_ref_pages._","title":"_  <code>module-attribute</code>","text":"<pre><code>_ = gen_ref_pages(config=RefGenConfig)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.mkdocs","title":"mkdocs","text":"<p>This module generates script entrypoints for Poetry related to MkDocs.</p>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.mkdocs.build","title":"build  <code>module-attribute</code>","text":"<pre><code>build = command_factory(\n    cmd=\"mkdocs build --config-file src/mkdocs_demo/mkdocs.yml --clean --use-directory-urls\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.mkdocs.serve","title":"serve  <code>module-attribute</code>","text":"<pre><code>serve = command_factory(\n    cmd=\"mkdocs serve --config-file src/mkdocs_demo/mkdocs.yml\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.mypy","title":"mypy","text":"<p>This module generates script entrypoints for Poetry related to Mypy typings generation.</p>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.mypy.gen_types","title":"gen_types  <code>module-attribute</code>","text":"<pre><code>gen_types = command_factory(\n    \"stubgen -p mkdocs_demo -o typings\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.precommit","title":"precommit","text":"<p>This module generates script entrypoints for Poetry related to pre-commit.</p>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.precommit.install","title":"install  <code>module-attribute</code>","text":"<pre><code>install = command_factory(cmd='pre-commit install')\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.precommit.run","title":"run  <code>module-attribute</code>","text":"<pre><code>run = command_factory(cmd='pre-commit run --all-files')\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/#mkdocs_demo.scripts.precommit.update","title":"update  <code>module-attribute</code>","text":"<pre><code>update = command_factory(cmd='pre-commit autoupdate')\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/gen_ref_pages/","title":"gen_ref_pages","text":""},{"location":"reference/mkdocs_demo/scripts/gen_ref_pages/#mkdocs_demo.scripts.gen_ref_pages","title":"mkdocs_demo.scripts.gen_ref_pages","text":"<p>This module generates reference pages for MkDocstrings.</p>"},{"location":"reference/mkdocs_demo/scripts/gen_ref_pages/#mkdocs_demo.scripts.gen_ref_pages._","title":"_  <code>module-attribute</code>","text":"<pre><code>_ = gen_ref_pages(config=RefGenConfig)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/mkdocs/","title":"mkdocs","text":""},{"location":"reference/mkdocs_demo/scripts/mkdocs/#mkdocs_demo.scripts.mkdocs","title":"mkdocs_demo.scripts.mkdocs","text":"<p>This module generates script entrypoints for Poetry related to MkDocs.</p>"},{"location":"reference/mkdocs_demo/scripts/mkdocs/#mkdocs_demo.scripts.mkdocs.build","title":"build  <code>module-attribute</code>","text":"<pre><code>build = command_factory(\n    cmd=\"mkdocs build --config-file src/mkdocs_demo/mkdocs.yml --clean --use-directory-urls\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/mkdocs/#mkdocs_demo.scripts.mkdocs.serve","title":"serve  <code>module-attribute</code>","text":"<pre><code>serve = command_factory(\n    cmd=\"mkdocs serve --config-file src/mkdocs_demo/mkdocs.yml\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/mypy/","title":"mypy","text":""},{"location":"reference/mkdocs_demo/scripts/mypy/#mkdocs_demo.scripts.mypy","title":"mkdocs_demo.scripts.mypy","text":"<p>This module generates script entrypoints for Poetry related to Mypy typings generation.</p>"},{"location":"reference/mkdocs_demo/scripts/mypy/#mkdocs_demo.scripts.mypy.gen_types","title":"gen_types  <code>module-attribute</code>","text":"<pre><code>gen_types = command_factory(\n    \"stubgen -p mkdocs_demo -o typings\"\n)\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/precommit/","title":"precommit","text":""},{"location":"reference/mkdocs_demo/scripts/precommit/#mkdocs_demo.scripts.precommit","title":"mkdocs_demo.scripts.precommit","text":"<p>This module generates script entrypoints for Poetry related to pre-commit.</p>"},{"location":"reference/mkdocs_demo/scripts/precommit/#mkdocs_demo.scripts.precommit.install","title":"install  <code>module-attribute</code>","text":"<pre><code>install = command_factory(cmd='pre-commit install')\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/precommit/#mkdocs_demo.scripts.precommit.run","title":"run  <code>module-attribute</code>","text":"<pre><code>run = command_factory(cmd='pre-commit run --all-files')\n</code></pre>"},{"location":"reference/mkdocs_demo/scripts/precommit/#mkdocs_demo.scripts.precommit.update","title":"update  <code>module-attribute</code>","text":"<pre><code>update = command_factory(cmd='pre-commit autoupdate')\n</code></pre>"}]}